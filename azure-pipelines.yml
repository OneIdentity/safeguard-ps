# https://aka.ms/yaml

trigger:
  branches:
    include: [ master, release-* ]

# Global Variables:
#
# version.<generated build number> gets set in a variable called VersionString.
#   VersionString is used to replace placeholders in module file.
#
# isPrerelease controls whether the release artifacts on GitHub and the PowerShell module
#   in the PowerShell Gallery is marked as prerelease or not.
#
variables:
  version: "6.9"
  isPrerelease: ${{ true }}
  isReleaseBranch: $[ or( eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release-') ) ]
  shouldDeploy: $[ and( eq( variables.isPrerelease, false ), eq( variables.isReleaseBranch, true ) ) ]

jobs:
- job:
  displayName: "Windows - PowerShell Gallery and Docker Images"
  pool:
    vmImage: 'windows-latest'

  steps:
  - task: PowerShell@2
    inputs:
      targetType: filePath
      failOnStderr: true
      filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
      arguments: $(version) $(Build.BuildId)
    displayName: 'Setting build version'

  - task: PowerShell@2
    inputs:
      targetType: inline
      failOnStderr: true
      script: |
        Write-Host "PSModulePath = $($env:PSModulePath)"
        $local:TargetDir = (($env:PSModulePath -split ';') | Where-Object { Test-Path $_ })[0]
        if (-not $TargetDir)
        {
          throw "Unable to find a PSModulePath in your user profile (" + $env:UserProfile + "), PSModulePath: " + $env:PSModulePath
        }
        $local:TargetDir = (Resolve-Path $local:TargetDir)
        Write-Host "ModuleDir = $($local:TargetDir)"
        Write-Output "##vso[task.setvariable variable=ModuleDir;]$($local:TargetDir)"
    displayName: 'Find PowerShell module path'
    condition: succeeded()

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
    displayName: 'Display environment variables'

  - task: PowerShell@2
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\install-forpipeline.ps1
      arguments: $(ModuleDir) $(VersionString) $$(isPrerelease)
    displayName: 'Building PowerShell module'
    condition: succeeded()

  - task: PowerShell@2
    inputs:
      targetType: inline
      failOnStderr: true
      script: Import-Module -Name safeguard-ps -Verbose
    displayName: 'Ensure that PowerShell module loads'
    condition: succeeded()

  - task: PowerShell@2
    inputs:
      targetType: inline
      failOnStderr: true
      script: |
        & $(System.DefaultWorkingDirectory)\invoke-docker-build.ps1 nanoserver $(VersionString)
        docker tag oneidentity/safeguard-ps:$(VersionString)-nanoserver oneidentity/safeguard-ps:$(VersionString)-windows
    displayName: 'Building Windows Docker image'
    condition: succeeded()

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'OneIdentity.RD.SBox.Safeguard-ServiceConnection'
      KeyVaultName: 'SafeguardBuildSecrets'
      SecretsFilter: 'PowerShellGalleryApiKey'
    displayName: 'Get PowerShell Gallery API key from Sandbox Azure Key Vault'
    condition: and( succeeded(), eq( variables.shouldDeploy, true ) )

  - task: PowerShell@2
    inputs:
      targetType: inline
      failOnStderr: true
      script: Publish-Module -Path $(Build.SourcesDirectory)\safeguard-ps -NuGetApiKey "$(PowerShellGalleryApiKey)" -Verbose -SkipAutomaticTags -Force
    displayName: 'Publish PowerShell module to PowerShell Gallery'
    condition: and( succeeded(), eq( variables.shouldDeploy, true ) )

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'OneIdentity.RD.SBox.Safeguard-ServiceConnection'
      KeyVaultName: 'SafeguardBuildSecrets'
      SecretsFilter: 'DockerHubAccessToken,DockerHubPassword'
    displayName: 'Get Docker Hub Access Token from Sandbox Azure Key Vault'
    continueOnError: false
    condition: and( succeeded(), eq( variables.shouldDeploy, true ) )

  - task: PowerShell@2
    inputs:
      targetType: inline
      failOnStderr: true
      script: |
        docker login -u petrsnd -p $(DockerHubAccessToken)
        docker push oneidentity/safeguard-ps:$(VersionString)-nanoserver
        docker logout
    displayName: 'Pushing Docker Windows Nano Server image to Docker Hub'
    condition: and( succeeded(), eq( variables.shouldDeploy, true ) )

- job:
  displayName: "Linux - Docker Images"
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: Bash@3
    inputs:
      targetType: 'filePath'
      failOnStderr: true
      filePath: '$(System.DefaultWorkingDirectory)/versionnumber.sh'
      arguments: $(version) $(Build.BuildId)
    displayName: 'Setting build version'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
    displayName: 'Display environment variables'

  - task: Bash@3
    inputs:
      targetType: inline
      failOnStderr: true
      script: |
        $(System.DefaultWorkingDirectory)/build-docker.sh ubuntu18.04 $(VersionString)
        $(System.DefaultWorkingDirectory)/build-docker.sh ubuntu16.04 $(VersionString)
        $(System.DefaultWorkingDirectory)/build-docker.sh centos7 $(VersionString)
        $(System.DefaultWorkingDirectory)/build-docker.sh alpine3.8 $(VersionString)
        $(System.DefaultWorkingDirectory)/build-docker.sh opensuse42.3 $(VersionString)
        $(System.DefaultWorkingDirectory)/build-docker.sh fedora28 $(VersionString)
        docker tag oneidentity/safeguard-ps:$(VersionString)-alpine3.8 oneidentity/safeguard-ps:latest
    displayName: 'Build Linux Docker images'
    condition: succeeded()

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'OneIdentity.RD.SBox.Safeguard-ServiceConnection'
      KeyVaultName: 'SafeguardBuildSecrets'
      SecretsFilter: 'DockerHubAccessToken,DockerHubPassword'
    displayName: 'Get Docker Hub Access Token from Sandbox Azure Key Vault'
    condition: and( succeeded(), eq( variables.shouldDeploy, true ) )

  - task: Bash@3
    inputs:
      targetType: 'inline'
      failOnStderr: true
      script: |
        docker login -u petrsnd --password-stdin <<<$(DockerHubAccessToken) 2>/dev/null
        docker push oneidentity/safeguard-ps:$(VersionString)-ubuntu18.04
        docker push oneidentity/safeguard-ps:$(VersionString)-ubuntu16.04
        docker push oneidentity/safeguard-ps:$(VersionString)-centos7
        docker push oneidentity/safeguard-ps:$(VersionString)-alpine3.8
        docker push oneidentity/safeguard-ps:$(VersionString)-opensuse42.3
        docker push oneidentity/safeguard-ps$(VersionString)-fedora28
        docker push oneidentity/safeguard-ps:latest
        docker logout
    condition: and( succeeded(), eq(variables.shouldDeploy, true) )
    displayName: 'Pushing Linux Docker images to Docker Hub'
