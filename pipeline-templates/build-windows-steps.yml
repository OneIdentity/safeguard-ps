steps:
- task: PowerShell@2
  inputs:
    targetType: filePath
    failOnStderr: true
    filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
    arguments: $(version) $(Build.BuildId)
  displayName: 'Setting build version'

- task: PowerShell@2
  inputs:
    targetType: inline
    failOnStderr: true
    script: |
      Write-Host "PSModulePath = $($env:PSModulePath)"
      $local:TargetDir = (($env:PSModulePath -split ';') | Where-Object { Test-Path $_ })[0]
      if (-not $TargetDir)
      {
        throw "Unable to find a PSModulePath in your user profile (" + $env:UserProfile + "), PSModulePath: " + $env:PSModulePath
      }
      $local:TargetDir = (Resolve-Path $local:TargetDir)
      Write-Host "ModuleDir = $($local:TargetDir)"
      Write-Output "##vso[task.setvariable variable=ModuleDir;]$($local:TargetDir)"
  displayName: 'Find PowerShell module path'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'env | sort'
  displayName: 'Display environment variables'

- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\install-forpipeline.ps1
    arguments: $(ModuleDir) $(VersionString) $$(isPrerelease)
  displayName: 'Building PowerShell module'

- task: PowerShell@2
  inputs:
    targetType: inline
    failOnStderr: true
    script: |
      Import-Module -Name safeguard-ps -Verbose
      Get-PSRepository
  displayName: 'Ensure that PowerShell module loads'

- task: PowerShell@2
  inputs:
    targetType: inline
    failOnStderr: true
    script: |
      $env:VERSION_STRING = "$(VersionString)"
      & $(System.DefaultWorkingDirectory)\invoke-docker-build.ps1 nanoserver $(VersionString)
      docker tag oneidentity/safeguard-ps:$(VersionString)-nanoserver oneidentity/safeguard-ps:$(VersionString)-windows
  displayName: 'Building Windows Docker image'